# Node.js with Vue
# Build a Node.js project that uses Vue.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  batch: true
  branches:
    include:
      - master
pr: none

pool:
  vmImage: ubuntu-latest

parameters:
- name: cancelPriorDeployments
  displayName: Cancel prior deployments
  type: boolean
  default: true

variables:
  cancelPriorDeployments: '${{ parameters.cancelPriorDeployments }}'
  devOpsApiVersion: 6.0

stages:
- stage: DEV
  jobs:
  - job: build
    steps:
    - task: Docker@2
      inputs:
        repository: 'vue-app'
        command: 'build'
        Dockerfile: 'Dockerfile'
        tags: 'latest'
    - task: PowerShell@2
      displayName: Cancel Pending Runs
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      inputs:
        targetType: inline
        script: |
          $header = @{ Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN" }
          $buildsUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/build/builds?api-version=$(devOpsApiVersion)"
          Write-Host "GET $buildsUrl"
          $builds = Invoke-RestMethod -Uri $buildsUrl -Method Get -Header $header
          $buildsToStop = $builds.value.Where({ ($_.status -eq 'inProgress') -and ($_.definition.name -eq "$(Build.DefinitionName)") -and ($_.id -lt $(Build.BuildId)) })
          ForEach($build in $buildsToStop)
          {
            $urlToCancel = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/build/builds/$($build.id)?api-version=$(devOpsApiVersion)"
            $body = @{ status = "cancelling" } | ConvertTo-Json
            Write-Host "PATCH $urlToCancel"
            Invoke-RestMethod -Uri $urlToCancel -Method Patch -Header $header -ContentType application/json -Body $body
          }
- stage: PROD
  lockBehavior: runLatest
  jobs:
  - deployment: deploy
    displayName: 'Build and Deploy to DEV'
    environment: DEVELOPMENT
    variables:
    - group: env-webapp-dev
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo deploted_to_DEV